<?php
/**
 * @file
 * Provide a feed mapper for hierarchical taxonomy terms.
 */


/**
 * Implements hook_feeds_processor_targets_alter().
 */
function feeds_taxonomy_hierarchy_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'taxonomy_term_reference') {
      $targets["{$name}_hierarchical"] = array(
        'name' => t('@name: hierarchical', array('@name' => check_plain($instance['label']))),
        'callback' => 'feeds_taxonomy_hierarchy__feeds_set_target',
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
      );
    }
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * @todo Do not create new terms for non-autotag fields.
 */
function feeds_taxonomy_hierarchy__feeds_set_target($source, $entity, $target, $terms) {
  if (empty($terms)) {
    return;
  }

  // Handle non-multiple values.
  if (!is_array($terms)) {
    $terms = array($terms);
  }

  // Strip the '_hierarchical' suffic from target.
  $target = substr($target, 0, -13);

  $info = field_info_field($target);

  // See http://drupal.org/node/881530
  if (isset($info['settings']['allowed_values'][0]['vocabulary'])) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($info['settings']['allowed_values'][0]['vocabulary']);
  }
  else {
    $vocabulary = taxonomy_vocabulary_load($info['settings']['allowed_values'][0]['vid']);
  }

  $i = 0;
  $entity->$target = isset($entity->$target) ? $entity->$target : array();
  $parent = NULL;
  foreach ($terms as $term) {
    $tid = 0;
    if ($term instanceof FeedsTermElement) {
      $tid = $term->tid;
    }
    elseif (is_numeric($term)) {
      $tid = $term;
    }
    elseif (is_string($term)) {
      $tid = feeds_taxonomy_hierarchy__check_term($term, $vocabulary->vid, $parent);
    }
    if ($tid) {
      $entity->{$target}[LANGUAGE_NONE][$i]['tid'] = $tid;
      $parent = $tid;
    }

    if ($info['cardinality'] == 1) {
      break;
    }
    $i++;
  }
}

/**
 * Checks whether a term identified by name and vocabulary exists. Creates a
 * new term if it does not exist.
 *
 * @param String $name
 *   A term name.
 * @param Int $vid
 *   A vocabulary id.
 * @param optional Int $parent
 *   tid of the parent term
 *
 * @return
 *   A term id.
 */
function feeds_taxonomy_hierarchy__check_term($name, $vid, $parent = NULL) {
  if (is_null($parent)) {
    // Invoke the default feeds implementation.
    return taxonomy_term_check_term($name, $vid);
  }


  $name = trim($name);
  $term = feeds_taxonomy_hierarchy__lookup_term($name, $vid, $parent);
  if (empty($term)) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;
    $term->parent = $parent;
    taxonomy_term_save($term);
    return $term->tid;
  }
  return $term->tid;
}


/**
 * Looks up a term, assumes SQL storage backend.
 */
function feeds_taxonomy_hierarchy__lookup_term($name, $vid, $parent) {
  $query = db_select('taxonomy_term_data', 'td');
  $query->join('taxonomy_term_hierarchy', 'th', 'td.tid=th.tid');

  return $query
    ->fields('td', array('tid', 'name'))
    ->condition('name', $name)
    ->condition('vid', $vid)
    ->condition('parent', $parent)
    ->execute()
    ->fetchObject();
}
