<?php

/**
 * @file
 * Helper module for the dialogue import.
 */

/**
 * A buffer of overlap between the imports in seconds.
 */
define('PW_DIALOGUES_IMPORT_BUFFER', 60 * 60 * 24);

/**
 * Implements hook_menu().
 */
function pw_dialogues_menu() {
  $menu['admin/config/services/pw-dialogues'] = array(
    'title' => 'Dialogue importer',
    'description' => 'Configure the source URL for the dialogue importer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_dialogues_settings_form'),
    'access arguments' => array('import dialogue_importer feeds'),
  );

  return $menu;
}

/**
 * Form constructor for the dialogues importer settings form.
 *
 * @ingroup forms
 */
function pw_dialogues_settings_form($form, &$form_state) {
  $form['pw_dialogues_source'] = array(
    '#type' => 'textfield',
    '#title' => t('XML source API'),
    '#default_value' => variable_get('pw_dialogues_source', ''),
    '#description' => t('If set, dialogues will be imported from this URL during cron runs.'),
    '#element_validate' => array('pw_dialogues_validate_url'),
    '#size' => 100,
  );

  return system_settings_form($form);
}

/**
 * Form element validation handler for pw_dialogues_settings_form().
 */
function pw_dialogues_validate_url(&$element, &$form_state) {
  $value = trim($element['#value']);
  form_set_value($element, $value, $form_state);

  if ($value != '' && !valid_url($value, TRUE)) {
    form_error($element, t('The URL %url is not valid.', array('%url' => $value)));
  }
}

/**
 * Implements hook_cron().
 */
function pw_dialogues_cron() {
  if ($source = variable_get('pw_dialogues_source')) {
    // Append the updated_since GET parameter to the source URL.
    if ($last_import = variable_get('pw_dialogues_last_import', 0)) {
      $updated_since = date('Y-m-d\\TH:i:s', $last_import - PW_DIALOGUES_IMPORT_BUFFER);
      if (strpos($source, '?') === FALSE) {
        $source .= '?updated_since=' . $updated_since;
      }
      else {
        $source .= '&updated_since=' . $updated_since;
      }
    }

    variable_set('pw_dialogues_last_import', REQUEST_TIME);

    // Import dialogues (questions).
    $dialogue_feed = feeds_source('dialogue_importer');
    $dialogue_feed->addConfig(array(
      'FeedsHTTPFetcher' => array(
        'source' => $source,
      ),
    ));
    while (FEEDS_BATCH_COMPLETE != $dialogue_feed->import());

    // Import messages (answers).
    $message_feed = feeds_source('dialogue_message_importer');
    $message_feed->addConfig(array(
      'FeedsHTTPFetcher' => array(
        'source' => $source,
      ),
    ));
    while (FEEDS_BATCH_COMPLETE != $message_feed->import());

    // Query which politicians have a changed question and answer count.
    $users = db_query('SELECT DISTINCT f.field_dialogue_recipient_target_id
                        FROM {field_data_field_dialogue_recipient} AS f 
                        INNER JOIN {feeds_item} AS i ON f.entity_type = i.entity_type AND f.entity_id = i.entity_id
                        WHERE i.imported >= :imported', array(':imported' => REQUEST_TIME - PW_DIALOGUES_IMPORT_BUFFER))->fetchCol();
                        
    foreach ($users as $uid) {

      // Query comments and nodes resulting in two arrays, keyed by 'answer' and 'question' with the corresponding counts as values.
      $node_query = db_query('SELECT field_dialogue_message_type_value AS type, COUNT(nid) AS count FROM {node} AS n INNER JOIN {field_data_field_dialogue_recipient} AS r ON r.entity_type = \'node\' AND r.entity_id = n.nid INNER JOIN {field_data_field_dialogue_message_type} AS f ON f.entity_type = \'node\' AND f.entity_id = n.nid WHERE r.field_dialogue_recipient_target_id = :uid AND n.status = 1 GROUP BY f.field_dialogue_message_type_value', array(':uid' => $uid))->fetchAllKeyed();
      $comment_query = db_query('SELECT field_dialogue_message_type_value AS type, COUNT(cid) AS count FROM {comment} AS c INNER JOIN {field_data_field_dialogue_message_type} AS f ON f.entity_type = \'comment\' AND f.entity_id = c.cid WHERE uid = :uid AND c.status = 1 GROUP BY f.field_dialogue_message_type_value', array(':uid' => $uid))->fetchAllKeyed();

      // Load the politician and update the fields.
      $account = user_load($uid);
      $edit = array();
      $edit['field_user_questions_get'][LANGUAGE_NONE][0]['value'] = 0;
      $edit['field_user_answers_give'][LANGUAGE_NONE][0]['value'] = 0;
      $edit['revision'] = 0;
      foreach (array($comment_query, $node_query) as $query) {
        if (isset($query['question'])) {
          $edit['field_user_questions_get'][LANGUAGE_NONE][0]['value'] += intval($query['question']);
        }
        if (isset($query['answer'])) {
         $edit['field_user_answers_give'][LANGUAGE_NONE][0]['value'] += intval($query['answer']);
        }
      }
      user_save($account, $edit);
    }
  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function pw_dialogues_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($bundle_name === NULL) {
    return;
  }

  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'entityreference') {
      $targets[$name . ':uuid'] = array(
        'name' => t('@label (by UUID)', array('@label' => $instance['label'])),
        'callback' => 'pw_dialogues_feeds_set_target',
      );
    }
  }

  if (isset($targets['uid'])) {
    $targets['uid:uuid'] = array(
      'name' => t('uid (by UUID)', array('@label' => $instance['label'])),
      'callback' => 'pw_dialogues_feeds_set_target',
    );
  }
}

/**
 * Performs entity reference mapping by UUID.
 *
 * @see entityreference_feeds_set_target().
 */
function pw_dialogues_feeds_set_target($source, $entity, $target, $value, $mapping) {
  if (empty($value)) {
    return;
  }

  if (is_array($value)) {
    $values = $value;
  }
  else {
    $values = array($value);
  }

  list($target) = explode(':', $target, 2);

  $info = field_info_field($target);
  $language = isset($mapping['language']) ? $mapping['language'] : LANGUAGE_NONE;

  $entity_ids = db_select('users', 'u')
    ->fields('u', array('uuid', 'uid'))
    ->condition('uuid', array_values($values), 'IN')
    ->execute()
    ->fetchAllKeyed();

  $iterator = 0;
  $field = isset($entity->target) ? $entity->target : array();
  foreach ($entity_ids as $entity_id) {
    if ($entity_id) {
      if ($info) {
        $field[$language][$iterator]['target_id'] = $entity_id;
      }
      else {
        $field = $entity_id;
      }
    }
    else {
      unset($entity->feeds_item->hash);
    }

    if (!$info || $info['cardinality'] == 1) {
      break;
    }
    $iterator++;
  }

  $entity->{$target} = $field;
}
