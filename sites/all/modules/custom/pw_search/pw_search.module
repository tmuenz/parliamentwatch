<?php
/**
 * With this module, the search index generation and view is changed to the
 * requirements to parliamentwatch.
 */

include_once 'pw_search.features.inc';

/**
 * Filter out dialogues that do not have a recipient (incorrect data).
 * @param type $entity_id
 * @param type $row
 * @param type $env_id
 * @return boolean
 */
function pw_search_apachesolr_node_exclude($entity_id, $row, $env_id) {
  $countArr = db_query("SELECT count(*) FROM {field_data_field_dialogue_recipient} WHERE entity_id=:entity_id GROUP BY entity_id", array(":entity_id" => $entity_id))->fetchCol();
  if (count($countArr) > 0) {
    return FALSE; // do not exclude the node. It seems to have a recipient.
  }
  return TRUE; // exclude it
}


/**
 * Returns TRUE if the user is not a politician (should be excluded in the search 
 * index) or FALSE if he is politician. The role assignment is checked via the
 * internal function is_politician().
 * @param type $entity_id
 * @param type $row
 * @param type $env_id
 * @return boolean
 */
function pw_search_apachesolr_user_exclude($entity_id, $row, $env_id) {
  return !pw_search_is_politician($entity_id);
}

/**
 * Internal helper to distinguish users by their role. 
 * @staticvar type $uidArr
 * @param type $uid
 * @return type
 */
function pw_search_is_politician($uid) {
  static $uidArr; 
  if (!isset($uidArr)) {
    $rid = variable_get("pw_search_politician_rid", variable_get('pw_search_role_id', 181527986)); // can be changed in the variables.
    $uidArr = db_query("SELECT uid FROM {users_roles} WHERE rid=:rid", array(":rid" => $rid))->fetchCol();
  }
  return in_array($uid, $uidArr);
}

/**
 * Add string indexing capability, which is not included in apachesolr. For
 * documentation on how to do this, please see apachesolr.api.php
 * @return array
 */
function pw_search_apachesolr_field_mappings() {
  $mappings = array(
    'text' => array(
      'indexing_callback' => 'apachesolr_fields_default_indexing_callback',
      'index_type' => 'string',
      'facets' => TRUE,
      'multiple' => FALSE,
    ),
  );
  return $mappings;
}

/**
 * Add the hard-coded display mode search_result to the user displays.
 * @param type $entity_info
 */
function pw_search_entity_info_alter(&$entity_info) {
  $entity_info["user"]["view modes"]["search_result"] = array(
      "label" => "Search Result",
      "custom settings" => TRUE, // enables the display mode automatically
  );
}

/**
 * Generate new facet on the field first character of last name 
 * @param type $searcher_info
 * @return type
 */
function pw_search_user_facetapi_facet_info($searcher_info) {
  $facets = array();
  if (isset($searcher_info['types']['user'])) {
    $facets['rid'] = array(
      'label' => t('Last Name Initial'),
      'description' => t('Filter by first letter of last name.'),
      'field' => 'sm_field_user_lname',
      'map callback' => 'user_roles',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
      'dependency plugins' => array('bundle', 'role'),
    );

    // Add facets for all fields attached to the user entity. 
    $facets = array_merge($facets, apachesolr_entity_field_facets('user'));
  }
  return $facets;
}

/**
 * Adds the field dialogue recipient, which is not included in the standard solr 
 * query fields. It does not matter how the field is displayed
 * in the display. Currently, it is set to "Rendered Entity" with "Rendered as 
 * User search" and it works.
 * @param DrupalSolrQueryInterface $query
 */
function pw_search_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  
  $query->addParam("fl", "sm_field_dialogue_recipient"); // first look field. This is a pseudo field.
  
  // We have to rewrite the "query fields" solr parameter, because it contains the label, which should not be searchable. 
  // The label equals the Drupal user name.
  // The original qf parameter contained "content^40", "label^5.0", and "taxonomy_names^2.0"
  // We add content and taxonomy_names with the default weight:
  $query->removeParam("qf");
  $query->addParam("qf", "content"); // defined in the index generation, see pw_search_apachesolr_index_document_build_user()
  $query->addParam("qf", "taxonomy_names"); // handles party, constituency, and parliament automatically
  $query->addParam("qf", "sm_areacodes");
  
}

/**
 * Load user if the searched item contains the field sm_field_dialogue_recipient,
 * which should be the case for correctly saved dialogues.
 * @param type $vars
 */
function pw_search_preprocess_search_result(&$vars) {
  if (array_key_exists("result", $vars)) {
    if (array_key_exists("fields", $vars["result"])) {
      if (array_key_exists("sm_field_dialogue_recipient", $vars["result"]["fields"])) {
        $uid = str_replace("user:", "", $vars["result"]["fields"]["sm_field_dialogue_recipient"][0]);
        $vars["result"]["recipient"] = user_load($uid);
      }
    }
  }
}

/**
 * Compiles the content field of the Solr document for dialogues. It consists of
 * the question body, the current first and last name of the recipient and the 
 * comment(s).
 * @param ApacheSolrDocument $document
 * @param type $entity
 * @param type $env_id
 */
function pw_search_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  $contentArr = array();
  
  $contentArr[] =  $entity->body["und"][0]["value"]; // Hier kommt das <crypt>-Tag aus dem body_value des Dialogues noch mit
  $contentArr[] =  $entity->field_dialogue_recipient["und"][0]["entity"]->field_user_fname["und"][0]["value"];
  $contentArr[] =  $entity->field_dialogue_recipient["und"][0]["entity"]->field_user_lname["und"][0]["value"];
  
  $comments = db_query("SELECT comment_body_value FROM field_data_comment_body where language='und' AND entity_id IN (SELECT cid FROM comment where nid=:nid)", array(":nid" => $entity->nid))->fetchAll();
  foreach ($comments as $comment) {
    $contentArr[] = $comment->comment_body_value;
  }
  
  // Add Dialogue Tags:
  if (array_key_exists("und", $entity->field_dialogue_tags)) {
    foreach ($entity->field_dialogue_tags["und"] as $dialogueTmp) {
      $contentArr[] = $dialogueTmp["taxonomy_term"]->name;
    }
  }
    
  // We do not add the topic here, because it is already searchable by the default query.
  $document->setField("content", implode(" ", $contentArr));
  
  // Add Parliament and Party of the recipient to make them facetable:
  $receivingUser = user_load($entity->field_dialogue_recipient["und"][0]["target_id"]);
  $document->setField('im_field_user_party', $receivingUser->field_user_party["und"][0]["tid"]);
  $document->setField('im_field_user_parliament', $receivingUser->field_user_parliament["und"][0]["tid"]);
}

/**
 * Overwrites the content field with historical names and area codes of the user.
 * Adds the fields to the spell field.
 * @param ApacheSolrDocument $document
 * @param type $entity
 * @param type $env_id
 */
function pw_search_apachesolr_index_document_build_user(ApacheSolrDocument $document, $entity, $env_id) {
  $contentArr = array();
  
  // Add historical names to the searchable content:
  $revisions = user_revision_list($entity);
  foreach ($revisions as $revision) {
    $account_tmp = user_revision_load($revision->uid, $revision->vid);
    $contentArr[] = $account_tmp->field_user_fname["und"][0]["value"];
    $contentArr[] = $account_tmp->field_user_lname["und"][0]["value"];
  }
  
  // Add Area Codes to the searchable content. There are two fields referencing area codes within constituencies; we add both:
  $constituency = taxonomy_term_load($entity->field_user_constituency["und"][0]["tid"]);
  $areacodes = $constituency->field_constituency_area_codes;
  if (is_array($areacodes) && count($areacodes) > 0) {
    foreach ($areacodes["und"] as $areacodeTmp) {
      $areacode = taxonomy_term_load($areacodeTmp["tid"]);
      $document->addField("sm_areacodes", $areacode->name);
    }
  }
//  $areacodes1 = $constituency->field_voc_constituency_zip;
//  if (is_array($areacodes1) && count($areacodes1) > 0) {
//    foreach ($areacodes1["und"] as $areacodeTmp) {
//      $areacode = taxonomy_term_load($areacodeTmp["tid"]);
//      $document->addField("sm_areacodes", $areacode->name);
//    }
//  }
  
  // We do not need to explicitly add Party, Constituency, and Parliament to the content.
  // They are handled automatically in the query by qf.taxonomy_names
  
  $document->setField("content", implode(" ", $contentArr));
  $document->setField("spell", $contentArr);
  
  // remove the birthday field, which has been added automatically to each user:
  unset($document->dm_field_user_birthday);
}
